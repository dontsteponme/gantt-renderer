<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>
        <%= htmlWebpackPlugin.options.title %>
    </title>
    <script src="bundle.js"></script>
    <style>
        html,
        body {
            width: 100%;
            min-height: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        canvas {
            width: 100%;
            height: 100%;
        }

    </style>
</head>

<body>
    <canvas id="canvas"></canvas>
    <script>
        const randomColor = () => {
            const randomized = () => {
                let bit = Math.floor(Math.random() * 255).toString(16);
                if (bit.length === 1) {
                    bit += bit;
                }
                return bit;
            }
            return `#${randomized()}${randomized()}${randomized()}`;
        };

        const randomDate = (offset) => {
            const day = 1000 * 60 * 60 * 24;
            const today = new Date();
            today.setUTCHours(0, today.getTimezoneOffset(), 0, 0);
            today.setDate(today.getDate() + Math.floor(Math.random() * offset) + offset);
            return today.valueOf();
        };

        const canvas = document.getElementById('canvas');
        const gantt = new ganttRenderer.Gantt(canvas);
        gantt.definition = {
            rowHeight: 50,
            columnWidth: 200,
            yOffset: 0,
            granularity: 'd',
            colors: {
                itemLabels: 'red',
                links: 'blue',
            },
            axis: {
                start: new Date('2023-04-11').valueOf(),
                end: new Date('2023-06-11').valueOf()
            },
        };

        const rows = [];
        for (let i = 0; i < 40; i++) {
            const start = randomDate(10);
            const end = randomDate(20);
            let startLabel, endLabel;
            if (Math.random() < 0.2) {
                startLabel = new Intl.DateTimeFormat('en-US', {
                    year: 'numeric',
                    month: 'numeric',
                    day: 'numeric'
                }).format(start);
                endLabel = new Intl.DateTimeFormat('en-US', {
                    year: 'numeric',
                    month: 'numeric',
                    day: 'numeric'
                }).format(end);
            }
            const color = randomColor();
            const row = {
                id: Math.random().toString(),
                label: 'row ' + i,
                item: {
                    label: 'item ' + i,
                    color: color,
                    start: start,
                    end: end,
                    startLabel: startLabel,
                    endLabel: endLabel,
                },
                children: [],
            };
            rows.push(row);

            const randomLen = Math.floor(Math.random() * 4);
            if (randomLen === 3) {
                delete row.item;
            }
            for (let j = 0; j < randomLen; j++) {
                row.children.push({
                    id: Math.random().toString(),
                    label: 'row ' + i + '.' + j,
                    item: {
                        label: 'item ' + i + '.' + j,
                        color: color,
                        start: randomDate(10),
                        end: randomDate(20),
                    },
                    children: [],
                })
            }
        }
        gantt.model = {
            rows: rows,
            milestones: [
                {
                    name: 'today',
                    color: 'red',
                    date: Date.now().valueOf()
                }
            ]
        };
        gantt.width = canvas.offsetWidth;
        gantt.height = canvas.offsetHeight;

        gantt.on('click', (...args) => {
            console.log.apply(null, args);
        });
        gantt.on('after', (id, after) => {
            console.log('after', id, after);
        });
        gantt.on('timeChange', (id, startDelta, endDelta) => {
            const row = gantt.model.rows.find(r => r.id === id);
            if (row) {
                row.item.start += startDelta;
                row.item.end += endDelta;
                gantt.model = gantt.model;
            }
        });
        window['gantt'] = gantt;
    </script>
</body>

</html>
